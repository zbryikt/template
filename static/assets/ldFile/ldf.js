// Generated by LiveScript 1.3.1
var ldFile, slice$ = [].slice;
ldFile = function(opt){
  var root, loadFile, fromPrompt, this$ = this;
  opt == null && (opt = {});
  import$(this, {
    evtHandler: {},
    opt: opt,
    root: root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root,
    type: opt.type || 'binary',
    ldcv: opt.ldcv || null
  });
  loadFile = function(f){
    return new Promise(function(res, rej){
      var fr;
      fr = new FileReader();
      fr.onload = function(){
        return res({
          result: fr.result,
          file: f
        });
      };
      if (this$.type === 'dataurl') {
        return fr.readAsDataURL(f);
      } else if (this$.type === 'text') {
        return fr.readAsText(f, this$.encoding || 'utf-8');
      } else if (this$.type === 'binary') {
        return fr.readAsBinaryString(f);
      } else if (this$.type === 'arraybuffer' || this$.type === 'blob') {
        return fr.readAsArrayBuffer(f);
      } else if (this$.type === 'blob') {
        return res(f);
      } else if (this$.type === 'bloburl') {
        return res(URL.createObjectURL(f));
      } else {
        return rej(new Error("ldFile: un-supported ytpe"));
      }
    });
  };
  fromPrompt = function(){
    return new Promise(function(res, rej){
      var ret;
      return res(ret = prompt());
    });
  };
  this.root.addEventListener('change', function(e){
    var files, promise;
    files = e.target.files;
    if (!files.length) {
      return;
    }
    promise = this$.type === 'text'
      ? (this$.ldcv
        ? this$.ldcv.get()
        : fromPrompt()).then(function(it){
        return this$.encoding = it;
      })
      : Promise.resolve();
    return promise.then(function(){
      return Promise.all(Array.from(files).map(function(f){
        return loadFile(f);
      }));
    }).then(function(it){
      return this$.fire('load', it);
    });
  });
  return this;
};
ldFile.prototype = import$(Object.create(Object.prototype), {
  on: function(n, cb){
    var ref$;
    return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
  },
  fire: function(n){
    var v, i$, ref$, len$, cb, results$ = [];
    v = slice$.call(arguments, 1);
    for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      results$.push(cb.apply(this, v));
    }
    return results$;
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
